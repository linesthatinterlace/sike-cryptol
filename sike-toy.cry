module siketoy where

////
//// SIKE Toy Implementation
////

///
/// Initialization
///

//
// Parameters
//


//
// Starting Curve
//

startingCurve = { A = [fromInteger 6, fromInteger 0], B = [fromInteger 1, fromInteger 0]} : MontgomeryCurve

//
// Parameter sets
//

/*
// p = 863
type e2 = 5
type e3 = 3
genP2 = mkAffine [0x0027, 0x001a] [0x0122, 0x01db]
genQ2 = mkAffine [0x02ff, 0x0045] [0x02a7, 0x029f]
genP3 = mkAffine [0x00df, 0x0000] [0x0004, 0x0000]
genQ3 = mkAffine [0x0270, 0x0000] [0x0000, 0x01b5]
*/

/*
// p = 15551
type e2 = 6
type e3 = 5

genP2 = mkAffine [0x31e7, 0x1e0e] [0x001f, 0x2089]
genQ2 = mkAffine [0x064b, 0x361f] [0x0b98, 0x123c]
genP3 = mkAffine [0x1fb1, 0x0000] [0x3c2a, 0x0000]
genQ3 = mkAffine [0x0a2f, 0x0000] [0x0000, 0x3bf6]
*/

/*
// p = 62207
type e2 = 8
type e3 = 5
genP2 = mkAffine [0x07f4, 0x1641] [0xb3ee, 0x6b34]
genQ2 = mkAffine [0x0dcc, 0x06df] [0xe18a, 0x8155]
genP3 = mkAffine [0x64b7, 0x0000] [0x5c28, 0x0000]
genQ3 = mkAffine [0x80a2, 0x0000] [0x0000, 0x583f]
*/

/*
// p = 17915903
type e2 = 13
type e3 = 7
genP2 = mkAffine [0x00dfedd1, 0x000cfe47] [0x003fd967, 0x0036aefd]
genQ2 = mkAffine [0x00b130f4, 0x002a4380] [0x0056052e, 0x00a0814d]
genP3 = mkAffine [0x0016dd2d, 0x00000000] [0x00c26491, 0x00000000]
genQ3 = mkAffine [0x0095daa1, 0x00000000] [0x00000000, 0x0068cd59]
*/


// p = 214990847
type e2 = 15
type e3 = 8
genP2 = mkAffine [0x0a7e21eb, 0x09ab3afb] [0x0366529e, 0x00615a32]
genQ2 = mkAffine [0x09875b2b, 0x076a3372] [0x00216b6b, 0x0b6465ec]
genP3 = mkAffine [0x09aa9e25, 0x00000000] [0x040d8353, 0x00000000]
genQ3 = mkAffine [0x0b96ade2, 0x00000000] [0x00000000, 0x082a1f97]



type p = 2^^e2*3^^e3 - 1
type Np = (lg2 p / 8) + (lg2 p % 8) /^ 8
type Nsk2 = e2 /^ 8
type Nsk3 = (lg2 (3^^e3) - 1) /^ 8

/*
// This finds the generator points from first principles, given an e2 and e3.
type e2 = 216
type e3 = 137

genP2 = mkP2Q2 <~ find P2Condition [1 ... ]
genQ2 = mkP2Q2 <~ find Q2Condition [1 ... ]
genP3 = mkP3Q3 <~ find P3Condition [1 ... ]
genQ3 = mkP3Q3 <~ find Q3Condition [1 ... ]

mkStartingPoint : Fp2 -> EllipticPoint
mkStartingPoint xP = P
    where
        xPSquared  = fp2Square xP
        xPCubed    = fp2Mult xP xPSquared
        yPSquared  = fp2Add (fp2Add xPCubed (fp2Mult startingCurve.A xPSquared)) xP
        yP         = fp2Sqrt yPSquared
        P          = if fp2QuadNonRes yPSquared then zero else mkAffine xP yP

mkP2Q2 : Integer -> EllipticPoint
mkP2Q2 c = P2Q2
    where
        basePoint   = mkStartingPoint [fromInteger c, fromInteger 1]
        P2Q2        = xTPLe`{width e3} `e3 startingCurve basePoint

P2Condition : Integer -> Bool
P2Condition c = twoTors.isAffine && ~twoTorsCheck.isAffine && (xTwoTors != [fromInteger 0, fromInteger 0])
    where
        P2              = mkP2Q2 c   
        twoTors         = xDBLe`{width e2} `(e2 - 1) startingCurve P2
        twoTorsCheck    = xDBL startingCurve twoTors
        xTwoTors        = twoTors.affine.x

Q2Condition : Integer -> Bool
Q2Condition c = twoTors.isAffine && ~twoTorsCheck.isAffine && (xTwoTors == [fromInteger 0, fromInteger 0])
    where
        Q2              = mkP2Q2 c
        twoTors         = xDBLe`{width e2} `(e2 - 1) startingCurve Q2
        twoTorsCheck    = xDBL startingCurve twoTors
        xTwoTors        = twoTors.affine.x

mkP3Q3 : Integer -> EllipticPoint
mkP3Q3 c = P3Q3
    where
        basePoint   = mkStartingPoint [fromInteger c, fromInteger 0]
        P3Q3        = xDBLe`{width e2} `(e2 - 1) startingCurve basePoint

P3Condition : Integer -> Bool
P3Condition c = threeTors.isAffine && ~threeTorsCheck.isAffine && basePoint.isAffine && ( (basePoint.affine.y @ 1) == fromInteger 0 )
    where
        P3              = mkP3Q3 c
        threeTors       = xTPLe`{width e3} `(e3 - 1) startingCurve P3
        threeTorsCheck  = xTPL startingCurve threeTors
        basePoint       = mkStartingPoint [fromInteger c, fromInteger 0]

Q3Condition : Integer -> Bool
Q3Condition c = threeTors.isAffine && ~threeTorsCheck.isAffine && basePoint.isAffine && ( (basePoint.affine.y @ 0) == fromInteger 0 )
    where
        Q3              = mkP3Q3 c
        threeTors       = xTPLe`{width e3} `(e3 - 1) startingCurve Q3
        threeTorsCheck  = xTPL startingCurve threeTors
        basePoint       = mkStartingPoint [fromInteger c, fromInteger 0]
*/

// 
// Data type conversions.
// 

ostoi : {mlen} (fin mlen) => [mlen][8] -> [mlen*8]
ostoi = reverse ~~> join

itoos : {mlen} (fin mlen) => [mlen*8] -> [mlen][8]
itoos = split ~~> reverse

ostofp : [Np][8] -> Fp
ostofp xs = if (a >= `p) then error "Octet string does not represent a member of F_p." else a
    where a = ostoi xs

fptoos : Fp -> [Np][8]
fptoos = itoos

ostofp2 : [2*Np][8] -> Fp2
ostofp2 = split ~~> map ostofp

fp2toos : Fp2 -> [2*Np][8]
fp2toos = map fptoos ~~> join

ostopk : [6*Np][8] -> [3]Fp2
ostopk = split ~~> map ostofp2

pktoos : [3]Fp2 -> [6*Np][8]
pktoos = map fp2toos ~~> join


///
/// Finite Fields
///

//
// F_p
//

pBits = `p : Fp

type Fp = [Np*8]       

fpMod : {n} (fin n) => [n + Np*8] -> Fp
fpMod a = drop (a % (zero # pBits))

fpAdd : Fp -> Fp -> Fp
fpAdd a b = fpMod <~ (0b0 # a) + (0b0 # b)

fpAddInv : Fp -> Fp
fpAddInv a = fpMod <~ pBits - fpMod a

fpAddUnit : Fp
fpAddUnit = zero

fpMult : Fp -> Fp -> Fp
fpMult a b = fpMod <~ (fpAddUnit # a) * (fpAddUnit # b)

fpMultUnit : Fp
fpMultUnit = zero # 0b1

fpCmp : Fp -> Fp -> Bit
fpCmp a b = fpMod a == fpMod b

fpSubt : Fp -> Fp -> Fp
fpSubt a b = fpAdd a (fpAddInv b)

fpDoub : Fp -> Fp
fpDoub a = fpAdd a a

fpScale : {n} (fin n) => Fp -> [n] -> Fp
fpScale a n = bs ! 0
    where   bs = [fpAddUnit] # [ if bit then fpAdd a (fpDoub b) else fpDoub b | b <- bs | bit <- n ]



fpPow : {n} (fin n) => Fp -> [n] -> Fp
fpPow a n = bs ! 0
    where   bs = [fpMultUnit] # [ if bit then fpMult a (fpSquare b) else fpSquare b | b <- bs | bit <- n ]

fpMultInv : Fp -> Fp
fpMultInv a =   if fpCmp a fpAddUnit
                then error "Cannot divide by zero!"
                else fpPow a ( pBits - 2 )

fpDiv : Fp -> Fp -> Fp
fpDiv a b = fpMult a (fpMultInv b)

fpSquare : Fp -> Fp
fpSquare a = fpMult a a

fpSqrt : Fp -> Fp
fpSqrt a =  if ~(fpCmp (fpSquare r) a) then error "Not a quadratic residue in Fp!"
            else    if isEven r
                    then r
                    else fpAddInv r
            where   r   = fpPow a ( pBits + 1 >> 2 )

fpQuadNonRes : Fp -> Bit
fpQuadNonRes a = ~(fpCmp (fpSquare r) a)
    where r   = fpPow a ( pBits + 1 >> 2 )
    
isEven : Fp -> Bit
isEven x = ~(x ! 0)

//
// F_(p^2)
//

type Fp2 = [2]Fp

lift : Fp -> Fp2
lift a = [a, fpAddUnit]

norm : Fp2 -> Fp
norm a = fpAdd (fpMult a0 a0) (fpMult a1 a1)
    where   [a0, a1]    = a

fp2Cmp : Fp2 -> Fp2 -> Bit
fp2Cmp [a0, a1] [b0, b1] = fpCmp a0 b0 /\ fpCmp a1 b1

fp2Add : Fp2 -> Fp2 -> Fp2
fp2Add [a0, a1] [b0, b1] = [fpAdd a0 b0, fpAdd a1 b1]

fp2AddInv : Fp2 -> Fp2
fp2AddInv  = map fpAddInv

fp2AddUnit : Fp2
fp2AddUnit = lift fpAddUnit

fp2Subt : Fp2 -> Fp2 -> Fp2
fp2Subt a b = fp2Add a (fp2AddInv b)

fp2Doub : Fp2 -> Fp2
fp2Doub a = fp2Add a a

fp2Scale : {n} (fin n) => Fp2 -> [n] -> Fp2
fp2Scale a n = bs ! 0
    where   bs = [fp2AddUnit] # [ if bit then fp2Add a (fp2Doub b) else fp2Doub b | b <- bs | bit <- n ]

fp2Mult : Fp2 -> Fp2 -> Fp2
fp2Mult [a0, a1] [b0, b1] = [fpSubt (fpMult a0 b0) (fpMult a1 b1), fpAdd (fpMult a0 b1) (fpMult a1 b0)]

fp2MultInv : Fp2 -> Fp2
fp2MultInv [a0, a1] =   if fp2Cmp [a0, a1] fp2AddUnit
                        then error "Cannot divide by zero!"
                        else [fpMult a0 (fpMultInv (norm [a0, a1])), fpMult (fpAddInv a1) (fpMultInv (norm [a0, a1]))]

fp2MultUnit : Fp2
fp2MultUnit = lift fpMultUnit

fp2Div : Fp2 -> Fp2 -> Fp2
fp2Div a b = fp2Mult a (fp2MultInv b)

fp2Square : Fp2 -> Fp2
fp2Square a = fp2Mult a a

fp2Pow : {n} (fin n) => Fp2 -> [n] -> Fp2
fp2Pow a n = bs ! 0
    where   bs = [fp2MultUnit] # [ if bit then fp2Mult a (fp2Square b) else fp2Square b | b <- bs | bit <- n ]

fp2Sqrt : Fp2 -> Fp2
fp2Sqrt a = if fpQuadNonRes (norm a)
            then error "Not a quadratic residue in Fp2!"
            else
                if      fpCmp a1 fpAddUnit
                then    if      fpQuadNonRes a0
                        then    [fpAddUnit, fpSqrt (fpAddInv a0)]
                        else    [fpSqrt a0, fpAddUnit]
                else    if      (isEven alpha)
                        then    fp2AddInv [alpha, beta]
                        else    [alpha, beta]
                where   [a0, a1]    = a
                        [alpha, beta]   =   if fpQuadNonRes z
                                            then [beta', fpAddInv alpha']
                                            else [alpha', beta']
                        inv2            =   fpMultInv 2
                        z               =   fpMult (fpAdd a0 (fpSqrt (norm a) ) ) inv2
                        alpha'          =   fpPow z ( pBits + 1 >> 2 )
                        beta'           =   fpMult (fpMult a1 (fpPow z ( pBits - 3 >> 2 )) ) inv2

fp2QuadNonRes : Fp2 -> Bit
fp2QuadNonRes = norm ~~> fpQuadNonRes


///
/// Curve Operations
///

//
// Elliptic Points and (Montgomery) curve data types.
//

type EllipticPoint = {affine: {x: Fp2, y: Fp2}, isAffine: Bit}

mkAffine : Fp2 -> Fp2 -> EllipticPoint
mkAffine x' y' = { affine = {x = x', y = y'}, isAffine = True }

type MontgomeryCurve = { A: Fp2, B: Fp2}

mkMC : Fp2 -> Fp2 -> MontgomeryCurve
mkMC a b = {A = a, B = b}

verifyCurve : MontgomeryCurve -> Bit
verifyCurve C = fp2Cmp discrim fp2AddUnit
    where   discrim = fp2Mult C.B (fp2Subt (fp2Square C.A) (fp2Doub ~~> fp2Doub <~ fp2MultUnit) )

verifyPoint : MontgomeryCurve -> EllipticPoint -> Bit
verifyPoint C P =  if ~P.isAffine
            then True
            else fp2Cmp LHS RHS
                where   
                        yP      = P.affine.y
                        yy      = fp2Square yP
                        LHS     = fp2Mult C.B yy
                        xx      = fp2Square xP
                        xP      = P.affine.x
                        xxx     = fp2Mult xP xx
                        Axx     = fp2Mult C.A xx
                        RHS     = fp2Add (fp2Add xxx Axx) xP
                            
                            
pointCompare : EllipticPoint -> EllipticPoint -> Bit
pointCompare P Q = if ~P.isAffine
                   then ~Q.isAffine
                   else (Q.isAffine) /\ (fp2Cmp P.affine.x Q.affine.x) /\ (fp2Cmp P.affine.y Q.affine.y)

//
// Point and curve operations.
//

// Algorithm 25
xDBL : MontgomeryCurve -> EllipticPoint -> EllipticPoint
xDBL C P =  if ~P.isAffine
            then zero
            |  pointCompare P (xNEGATE C P)
            then zero
            else mkAffine x2P y2P
                where   xP  = P.affine.x
                        yP  = P.affine.y
                        t3  = fp2Square xP
                        t4  = fp2Doub t3
                        t5  = fp2MultUnit
                        t6  = fp2Add t3 t4
                        t7  = fp2Mult C.A xP
                        t8  = fp2Doub t7
                        t9  = fp2Add t6 t8
                        t10 = fp2Add t9 t5
                        t11 = fp2Mult C.B yP
                        t12 = fp2Doub t11
                        t13 = fp2MultInv t12
                        t14 = fp2Mult t10 t13
                        t15 = fp2Square t14
                        t16 = fp2Mult C.B t15
                        t17 = fp2Subt t16 C.A
                        t18 = fp2Subt t17 xP
                        t19 = fp2Subt t18 xP
                        t20 = fp2Mult t14 t15
                        t21 = fp2Mult C.B t20
                        t22 = fp2Add t21 yP
                        t23 = fp2Doub xP
                        t24 = fp2Add t23 xP
                        t25 = fp2Add t24 C.A
                        t26 = fp2Mult t25 t14
                        t27 = fp2Subt t26 t22
                        x2P = t19
                        y2P = t27

// Algorithm 26
xDBLe : {n} (fin n) => [n] -> MontgomeryCurve -> EllipticPoint -> EllipticPoint
xDBLe e C P = ys @ e
                where ys = iterate (xDBL C) P


xNEGATE : MontgomeryCurve -> EllipticPoint -> EllipticPoint
xNEGATE C P =   if ~P.isAffine
                then P
                else {affine = {x = xP, y = fp2AddInv yP}, isAffine = True}
                    where   xP = P.affine.x
                            yP = P.affine.y

// Algorithm 27
xADD : MontgomeryCurve -> EllipticPoint -> EllipticPoint -> EllipticPoint
xADD C P Q =    if ~P.isAffine
                then Q
                |  ~Q.isAffine
                then P
                | pointCompare P Q
                then xDBL C P
                | pointCompare P (xNEGATE C Q)
                then zero
                else mkAffine xPQ yPQ
                    where   xP  = P.affine.x
                            yP  = P.affine.y
                            xQ  = Q.affine.x
                            yQ  = Q.affine.y
                            t9  = fp2Subt yQ yP
                            t10 = fp2Subt xQ xP
                            t11 = fp2MultInv t10
                            t12 = fp2Mult t9 t11
                            t13 = fp2Square t12
                            t14 = fp2Doub xP
                            t15 = fp2Add t14 xQ
                            t16 = fp2Add t15 C.A
                            t17 = fp2Mult t16 t12
                            t18 = fp2Mult t12 t13
                            t19 = fp2Mult C.B t18
                            t20 = fp2Add t19 yP
                            t21 = fp2Subt t17 t20
                            t22 = fp2Mult C.B t13
                            t23 = fp2Subt t22 C.A
                            t24 = fp2Subt t23 xP
                            t25 = fp2Subt t24 xQ
                            xPQ = t25
                            yPQ = t21



// Algorithm 28
xTPL : MontgomeryCurve -> EllipticPoint -> EllipticPoint
xTPL C P = xADD C P (xDBL C P)

// Algorithm 29
xTPLe : {n} (fin n) => [n] -> MontgomeryCurve -> EllipticPoint -> EllipticPoint
xTPLe e C P  = ys @ e
                where ys = iterate (xTPL C) P

// Algorithm 30
double_and_add : {n} (fin n) => MontgomeryCurve -> EllipticPoint -> [n] -> EllipticPoint
double_and_add C P n = bs ! 0
                        where bs = [zero] # [ if bit then xADD C P (xDBL C b) else xDBL C b | b <- bs | bit <- n ]

// Algorithm 31
j_inv : MontgomeryCurve ->  Fp2
j_inv C = j
    where   t1  = fp2Square C.A
            t2  = fp2Add (fp2Doub fp2MultUnit) fp2MultUnit
            t3  = fp2Subt t1 t2
            t4  = fp2Square t3
            t5  = fp2Mult t3 t4
            t6  = fp2Doub t5
            t7  = fp2Doub t6
            t8  = fp2Doub t7
            t9  = fp2Doub t8
            t10 = fp2Doub t9
            t11 = fp2Doub t10
            t12 = fp2Doub t11
            t13 = fp2Doub t12
            t14 = fp2Doub ~~> fp2Doub <~ fp2MultUnit
            t15 = fp2Subt t1 t14
            t16 = fp2MultInv t15
            t17 = fp2Mult t13 t16
            j   = t17

//
// Isogenies.
//

// Algorithm 32
curve_2_iso : Fp2 -> MontgomeryCurve -> MontgomeryCurve
curve_2_iso x2 C = {A = a', B = b'}
    where   t1  = fp2Square x2
            t2  = fp2Doub t1
            t3  = fp2Subt fp2MultUnit t2
            t4  = fp2Doub t3
            t5  = fp2Mult x2 C.B
            a'  = t4
            b'  = t5
                            
// a' = 2*(1-2*x2^2)
// b' = x2*b
          
         
// Algorithm 33
eval_2_iso : Fp2 -> EllipticPoint -> EllipticPoint
eval_2_iso x2 Q = Q'
    where   (xQ, yQ) = (Q.affine.x, Q.affine.y)
            t1  = fp2Mult xQ x2
            t2  = fp2Mult xQ t1
            t3  = fp2Mult t1 x2
            t4  = fp2Doub t3
            t5  = fp2Subt t2 t4
            t6  = fp2Add t5 x2
            t7  = fp2Mult yQ t6
            t8  = fp2Subt t2 xQ
            t9  = fp2Subt xQ x2
            t10 = fp2MultInv t9
            t11 = fp2Mult t8 t10
            t12 = fp2Square t10
            t13 = fp2Mult t7 t12
            xQ' = t11
            yQ' = t13
            Q'  = mkAffine xQ' yQ'

// xQ':=(xQ^2*x2-xQ)/(xQ-x2);
// yQ':=yQ*(xQ^2*x2-2*xQ*x2^2+x2)/(xQ-x2)^2;

// Algorithm 34
curve_4_iso : Fp2 -> MontgomeryCurve -> MontgomeryCurve
curve_4_iso x4 C = {A = a', B = b'}
    where   t1  = fp2Square x4
            t2  = fp2Square t1
            t3  = fp2Doub t2
            t4  = fp2Doub t3
            t5  = fp2Doub fp2MultUnit
            t6  = fp2Subt t4 t5
            t7  = fp2Mult x4 t1
            t8  = fp2Add t7 x4
            t9  = fp2Mult t8 C.B
            t10 = fp2MultInv t5
            t11 = fp2AddInv t10
            t12 = fp2Mult t11 t9
            a'  = t6
            b'  = t12

// a':=4*x4^4-2;
// b':== -(1/2)*(x4^3+x4)*b;

// Algorithm 35
eval_4_iso : Fp2 -> EllipticPoint -> EllipticPoint
eval_4_iso x4 Q = Q'
    where   (xQ, yQ) = (Q.affine.x, Q.affine.y)
            t1  = fp2Square xQ
            t2  = fp2Square t1
            t3  = fp2Square x4
            t4  = fp2Mult t2 t3
            t5  = fp2Add t2 t4
            t6  = fp2Mult t1 t3
            t7  = fp2Doub t6
            t8  = fp2Doub t7
            t9  = fp2Doub t8
            t10 = fp2Add t7 t9
            t11 = fp2Add t5 t10
            t12 = fp2Square t3
            t13 = fp2Mult t1 t12
            t14 = fp2Doub t13
            t15 = fp2Add t11 t14
            t16 = fp2Mult t1 xQ
            t17 = fp2Mult x4 t3
            t18 = fp2Mult t16 t17
            t19 = fp2Doub t18
            t20 = fp2Doub t19
            t21 = fp2Subt t15 t20
            t22 = fp2Mult t16 x4 
            t23 = fp2Doub t22
            t24 = fp2Doub t23
            t25 = fp2Subt t21 t24
            t26 = fp2Mult xQ t17
            t27 = fp2Doub t26
            t28 = fp2Doub t27
            t29 = fp2Subt t25 t28
            t30 = fp2Add t29 t3
            t31 = fp2Add t30 fp2MultUnit
            t32 = fp2Mult xQ x4
            t33 = fp2Subt t32 fp2MultUnit
            t34 = fp2Doub t32
            t35 = fp2Doub t34
            t36 = fp2Subt t31 t35
            t37 = fp2Mult t33 t36
            t38 = fp2Mult t3 t37
            t39 = fp2Mult yQ t38
            t40 = fp2Doub t39
            t41 = fp2AddInv t40
            t42 = fp2Subt t34 t3
            t43 = fp2Subt t42 fp2MultUnit
            t44 = fp2Subt xQ x4
            t45 = fp2Mult t44 t43
            t46 = fp2Square t45
            t47 = fp2Mult t46 t44
            t48 = fp2MultInv t47
            t49 = fp2Mult t41 t48
            t50 = fp2Mult t45 t44
            t51 = fp2MultInv t50
            t52 = fp2Square t33
            t53 = fp2Mult t51 t52
            t54 = fp2Mult xQ t53
            t55 = fp2Mult xQ t3
            t56 = fp2Add t55 xQ
            t57 = fp2Doub x4
            t58 = fp2Subt t56 t57
            t59 = fp2AddInv t58
            t60 = fp2Mult t54 t59
            xQ' = t60
            yQ' = t49
            Q'  = mkAffine xQ' yQ'

// xx:=x(-x*x4^2-x+2*x4)*C*C/(B*B*A);
// yy:=y*x4^2*C*D/(B*B*B*A*A);

// Algorithm 36
curve_3_iso : Fp2 -> MontgomeryCurve -> MontgomeryCurve
curve_3_iso x3 C = {A = a', B = b'}
    where   t1  = fp2Square x3
            t2  = fp2Mult C.B t1
            t3  = fp2Doub t1
            t4  = fp2Doub t3
            t5  = fp2Add t3 t4
            t6  = fp2Doub <~ fp2Add (fp2Doub fp2MultUnit) fp2MultUnit
            t7  = fp2Subt t5 t6
            t8  = fp2Mult C.A x3
            t9  = fp2Subt t8 t7
            t10 = fp2Mult t9 x3
            a'  = t10
            b'  = t2

// a':=(a*x3-6*x3^2+6)*x3;
// b':=b*x3^2;

// Algorithm 37
eval_3_iso : Fp2 -> EllipticPoint -> EllipticPoint
eval_3_iso x3 Q = Q'
    where   (xQ, yQ) = (Q.affine.x, Q.affine.y)
            t1  = fp2Square xQ
            t2  = fp2Mult t1 x3
            t3  = fp2Square x3
            t4  = fp2Mult xQ t3
            t5  = fp2Doub t4
            t6  = fp2Add t4 t5
            t7  = fp2Subt t2 t6
            t8  = fp2Add t7 xQ
            t9  = fp2Add t8 x3
            t10 = fp2Subt xQ x3
            t11 = fp2MultInv t10
            t12 = fp2Square t11
            t13 = fp2Mult t11 t12
            t14 = fp2Mult xQ x3
            t15 = fp2Subt t14 fp2MultUnit
            t16 = fp2Mult t15 t9
            t17 = fp2Mult t16 t13
            t18 = fp2Square t15
            t19 = fp2Mult t18 t12
            t20 = fp2Mult xQ t19
            t21 = fp2Mult yQ t17
            xQ' = t20
            yQ' = t21
            Q'  = mkAffine xQ' yQ'

// xQ':=xQ*(xQ*x3-1)^2/(xQ-x3)^2;
// yQ':=yQ*(xQ*x3-1)*(xQ^2*x3-3*xQ*x3^2+xQ+x3)/(xQ-x3)^3;

// Algorithm 38
iso_2_e : {n} (fin n) => EllipticPoint -> (MontgomeryCurve, [n]EllipticPoint) -> (MontgomeryCurve, [n]EllipticPoint)
iso_2_e S' (C', Ps') = (C'', Ps'')
    where   init = {S = S', C = C', Ps = Ps'}
            init' = if (`e2 : Integer) % 2 == 1 then iso_2_e_odd_step (`e2 - 1) init else init
            ms = reverse [0, 2 .. e2 - 2]
            ys = [init'] # [ iso_2_e_step m y | m <- ms | y <- ys ]
            final_y = ys ! 0
            (C'', Ps'') = (final_y.C, final_y.Ps)

iso_2_e_odd_step : {n} (fin n) => [width e2] -> {S: EllipticPoint, C: MontgomeryCurve, Ps: [n]EllipticPoint} -> { S: EllipticPoint, C: MontgomeryCurve, Ps: [n]EllipticPoint }
iso_2_e_odd_step k y = {S = S', C = C', Ps = Ps'}
    where   T   = xDBLe k y.C y.S
            xT  = if ~T.isAffine then undefined else T.affine.x
            S'  = eval_2_iso xT y.S
            C'  = curve_2_iso xT y.C
            Ps' = map (eval_2_iso xT) y.Ps

iso_2_e_step : {n} (fin n) => [width e2] -> {S: EllipticPoint, C: MontgomeryCurve, Ps: [n]EllipticPoint} -> { S: EllipticPoint, C: MontgomeryCurve, Ps: [n]EllipticPoint }
iso_2_e_step k y = {S = S', C = C', Ps = Ps'}
    where   T   = xDBLe k y.C y.S
            xT  = if ~T.isAffine then undefined else T.affine.x
            S'  = eval_4_iso xT y.S
            C'  = curve_4_iso xT y.C
            Ps' = map (eval_4_iso xT) y.Ps

// Algorithm 39
iso_3_e : {n} (fin n) => EllipticPoint -> (MontgomeryCurve, [n]EllipticPoint) -> (MontgomeryCurve, [n]EllipticPoint)
iso_3_e S' (C', Ps') = (C'', Ps'')
    where   init = {S = S', C = C', Ps = Ps'}
            ms = reverse [0 .. e3 - 1]
            ys = [init] # [ iso_3_e_step m y | m <- ms | y <- ys ]
            final_y = ys ! 0
            (C'', Ps'') = (final_y.C, final_y.Ps)

iso_3_e_step : {n} (fin n) => [width e3] -> {S: EllipticPoint, C: MontgomeryCurve, Ps: [n]EllipticPoint} -> { S: EllipticPoint, C: MontgomeryCurve, Ps: [n]EllipticPoint }
iso_3_e_step k y = {S = S', C = C', Ps = Ps'}
    where   T = xTPLe k y.C y.S
            xT = if ~T.isAffine then undefined else T.affine.x
            S' = eval_3_iso xT y.S
            C' = curve_3_iso xT y.C
            Ps' = map (eval_3_iso xT) y.Ps

// Algorithm 10
get_A : [3]Fp2 -> Fp2
get_A [xP, xQ, xR] = A
    where   t1  = fp2Add xP xQ
            t2  = fp2Mult xP xQ
            t3  = fp2Mult xR t1
            t4  = fp2Add t3 t2
            t5  = fp2Mult t2 xR
            t6  = fp2Subt t4 fp2MultUnit
            t7  = fp2Doub t5
            t8  = fp2Add t1 xR
            t9  = fp2Doub t7
            t10 = fp2Square t6
            t11 = fp2MultInv t9
            t12 = fp2Mult t10 t11
            t13 = fp2Subt t12 t8
            A   = t13

// Algorithm 40
get_xR : MontgomeryCurve -> EllipticPoint -> EllipticPoint -> Fp2
get_xR C P Q = (xADD C P <~ xNEGATE C Q).affine.x

// Algorithm 41
get_yP_yQ_A_B : [6*Np][8] -> ([2]Fp2, MontgomeryCurve)
get_yP_yQ_A_B pk = ([yP, yQ'], C)
    where   [xP, xQ, xR] = ostopk pk
            t1  = get_A [xP, xQ, xR]
            t2  = fp2MultUnit
            t3  = fp2Square xP
            t4  = fp2Mult xP t3
            t5  = fp2Mult t1 t3
            t6  = fp2Add t4 t5
            t7  = fp2Add t6 xP
            t8  = fp2Sqrt t7
            t9  = fp2Square xQ
            t10 = fp2Mult xQ t9
            t11 = fp2Mult t1 t9
            t12 = fp2Add t10 t11
            t13 = fp2Add t12 xQ
            t14 = fp2Sqrt t13        
            yP  = t8
            yQ  = t14
            C   = mkMC t1 t2
            P   = mkAffine xP yP
            Q   = mkAffine xQ yQ
            yQ' = if ~( fp2Cmp (get_xR C P Q) xR ) then fp2AddInv yQ else yQ

//
// isogen_l and isoex_l for l in {2, 3}
//

// Algorithm 42
isogen_2 : [Nsk2][8] -> [6*Np][8]
isogen_2 sk2 = pk2
    where   exponent = ostoi sk2
            S = xADD startingCurve genP2 (double_and_add`{Nsk2*8} startingCurve genQ2 exponent )
            (C, [P3', Q3']) = iso_2_e S (startingCurve, [genP3, genQ3])
            xP3' = P3'.affine.x
            xQ3' = Q3'.affine.x
            xR3' = get_xR C P3' Q3'
            pk2 = pktoos [xP3', xQ3', xR3']

// Algorithm 43
isogen_3 : [Nsk3][8] -> [6*Np][8]
isogen_3 sk3 = pk3
    where   exponent = ostoi sk3
            S = xADD startingCurve genP3 (double_and_add`{Nsk3*8} startingCurve genQ3 exponent)
            (C, [P2', Q2']) = iso_3_e S (startingCurve, [genP2, genQ2])
            xP2' = P2'.affine.x
            xQ2' = Q2'.affine.x
            xR2' = get_xR C P2' Q2'
            pk3 = pktoos [xP2', xQ2', xR2']

// Algorithm 44
isoex_2 : [6*Np][8] -> [Nsk2][8] -> [2*Np][8]
isoex_2 pk3 sk2 = j2
    where   exponent = ostoi sk2
            [xP2', xQ2', xR2'] = ostopk pk3
            ([yP2', yQ2'], C) = get_yP_yQ_A_B pk3
            P2' = mkAffine xP2' yP2' 
            Q2' = mkAffine xQ2' yQ2'
            S = xADD C P2' (double_and_add`{Nsk2*8} C Q2' exponent)
            (C', _) = iso_2_e S (C, [])
            j2 = fp2toos <~ j_inv C'


// Algorithm 45
isoex_3 : [6*Np][8] -> [Nsk3][8] -> [2*Np][8]
isoex_3 pk2 sk3 = j3
    where   exponent = ostoi sk3
            [xP3', xQ3', xR3'] = ostopk pk2
            ([yP3', yQ3'], C) = get_yP_yQ_A_B pk2
            P3' = mkAffine xP3' yP3' 
            Q3' = mkAffine xQ3' yQ3'
            S = xADD C P3' (double_and_add`{Nsk3*8} C Q3' exponent)
            (C', _) = iso_3_e S (C, [])
            j3 = fp2toos <~ j_inv C'


isogenWork: ([Nsk2][8], [Nsk3][8]) -> Bool
isogenWork (secretKeyAlice, secretKeyBob) = sharedSecretAlice == sharedSecretBob
    where
        publicKeyAlice      = isogen_2 secretKeyAlice
        publicKeyBob        = isogen_3 secretKeyBob
        sharedSecretAlice   = isoex_2 publicKeyBob secretKeyAlice
        sharedSecretBob     = isoex_3 publicKeyAlice secretKeyBob

///
/// Tests
///

//
// F_p Arithmetic Tests
//

property fpAddAssociative a b c = fpCmp ( fpAdd a ( fpAdd b c ) ) ( fpAdd ( fpAdd a b ) c )
property fpAddCommutative a b = fpCmp ( fpAdd a b ) ( fpAdd b a )
property fpAddZeroIdentity a = fpCmp (fpAdd a fpAddUnit ) a
property fpAddValidInverse a = fpCmp ( fpAdd a (fpAddInv a) ) ( fpAddUnit )
property fpSubtOrderOfOps a b c = fpCmp ( fpSubt (fpSubt a b) c ) ( fpSubt a (fpAdd b c) )
property fpSubtAnticommutative a b = fpCmp ( fpSubt a b ) ( fpAddInv (fpSubt b a) )
property fpSubtZeroIdentity a = fpCmp ( fpSubt a fpAddUnit ) a
property fpMultAssociative a b c = fpCmp ( fpMult a ( fpMult b c ) ) ( fpMult ( fpMult a b ) c )
property fpMultDistributive a b c = fpCmp ( fpMult a (fpAdd b c) ) ( fpAdd (fpMult a b) (fpMult a c) )
property fpMultCommutative a b = fpCmp ( fpMult a b ) ( fpMult b a )
property fpMultOneIdentity a = fpCmp ( fpMult a fpMultUnit ) a
property fpMultZeroNull a = fpCmp ( fpMult a fpAddUnit ) fpAddUnit
property fpSquareIsMult a = fpCmp ( fpSquare a ) ( fpMult a a )
property fpAddInvSquareSelf = fpCmp ( fpSquare fpAddUnit ) fpAddUnit
property fpMultValidInverse a = fpCmp a fpAddUnit \/ fpCmp ( fpMult a (fpMultInv a) ) fpMultUnit
property fpMultInverseInverseIdentity a = fpCmp a fpAddUnit \/ fpCmp ( fpMultInv (fpMultInv a) ) a
property fpSquareSqrtIdentity a = fpQuadNonRes a \/ fpCmp ( (fpSqrt ~~> fpSquare) a ) a
property fpSqrtSquareIdentity a = fpCmp ( (fpSquare ~~> fpSqrt) a ) a \/ fpCmp ( (fpSquare ~~> fpSqrt) a ) ( fpAddInv a )

//
// F_(p^2) Arithmetic Tests
//

property fp2AddAssociative a b c = fp2Cmp ( fp2Add a ( fp2Add b c ) ) ( fp2Add ( fp2Add a b ) c )
property fp2AddCommutative a b = fp2Cmp ( fp2Add a b ) ( fp2Add b a )
property fp2AddZeroIdentity a = fp2Cmp ( fp2Add a fp2AddUnit ) a
property fp2AddValidInverse a = fp2Cmp ( fp2Add a (fp2AddInv a) ) fp2AddUnit
property fp2SubtOrderOfOps a b c = fp2Cmp ( fp2Subt (fp2Subt a b) c ) ( fp2Subt a (fp2Add b c) )
property fp2SubtAnticommutative a b = fp2Cmp ( fp2Subt a b ) ( fp2AddInv (fp2Subt b a) )
property fp2SubtZeroIdentity a = fp2Cmp ( fp2Subt a fp2AddUnit ) a
property fp2MultAssociative a b c = fp2Cmp ( fp2Mult a ( fp2Mult b c ) ) ( fp2Mult ( fp2Mult a b ) c )
property fp2MultDistributive a b c = fp2Cmp ( fp2Mult a (fp2Add b c) ) ( fp2Add (fp2Mult a b) (fp2Mult a c) )
property fp2MultCommutative a b = fp2Cmp ( fp2Mult a b ) ( fp2Mult b a )
property fp2MultOneIdentity a = fp2Cmp ( fp2Mult a fp2MultUnit ) a
property fp2MultZeroNull a = fp2Cmp ( fp2Mult a fp2AddUnit ) fp2AddUnit
property fp2SquareIsMult a = fp2Cmp ( fp2Square a ) ( fp2Mult a a )
property fp2AddInvSquareSelf = fp2Cmp ( fp2Square fp2AddUnit ) fp2AddUnit
property fp2MultValidInverse a = fp2Cmp a fp2AddUnit \/ fp2Cmp ( fp2Mult a (fp2MultInv a) ) fp2MultUnit
property fp2MultInverseInverseIdentity a = fp2Cmp a fp2AddUnit \/ fp2Cmp ( fp2MultInv (fp2MultInv a) ) a
property fp2SquareSqrtIdentity a = fp2QuadNonRes a \/ fp2Cmp ( (fp2Sqrt ~~> fp2Square) a ) a
property fp2SqrtSquareIdentity a = fp2Cmp ( (fp2Square ~~> fp2Sqrt) a ) a \/ fp2Cmp ( (fp2Square ~~> fp2Sqrt) a ) ( fp2AddInv a )


///
/// Miscellaneous
///

//
// Functional programming operators.
//

(~~>) : {a, b, c} (a -> b) -> (b -> c) -> a -> c
(~~>) f g = \x -> g (f x)
infixr 100 ~~>

(<~) : {a, b} (a -> b) -> a -> b
(<~) f x = f x
infixr 1 <~

//
// Find functions.
//

find : {a} (a -> Bool) -> [inf]a -> a
find p xs = if (p (head xs)) then head xs else find p (tail xs)
